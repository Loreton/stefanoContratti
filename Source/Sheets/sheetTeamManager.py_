#!/usr/bin/env python3
#
# updated by ...: Loreto Notarantonio
# Date .........: 05-05-2025 08.47.35
#


import sys; sys.dont_write_bytecode = True
import os
from pathlib import Path
from benedict import benedict
from types import SimpleNamespace
from enum import Enum
import pandas as pd

import  openpyxl
from openpyxl import load_workbook
from openpyxl.styles import PatternFill


self=sys.modules[__name__]

import ln_pandasExcel_Class as lnExcel
import lnUtils
import dictUtils
from ln_pandasExcel_Class import workBbookClass, sheetClass
import commonFunctions


def setup(gVars: (dict, SimpleNamespace)):
    global gv
    gv=gVars
    gv.logger.caller(__name__)
    # gv.excelBook=None




############################################################
# cell_range = [ (row1, col1), (row2, col2), ...]
############################################################
def setTMagagerColor(ws, cells: list):
    light_yellow_3 = 'ffffa6'

    my_color = light_yellow_3
    # for cell in cells: #- prendo direttamente il tuple
    #     ws.cell.fill = PatternFill(start_color=my_color, end_color=my_color, fill_type="solid") #used hex code for red color
    for row, col in cells:
        curr_cell = ws.cell(row, col)
        curr_cell.fill = PatternFill(start_color=my_color, end_color=my_color, fill_type="solid") #used hex code for red color




def processAgentList(agent_list: list, partner_column: dict, somma: list):
    for agent_name in agent_list:
        gv.logger.info("    agent: %s", agent_name)
        if agent_data:=gv.agent_results.get(agent_name): # se presente....
            ### --- calcoliamo i valori
            for partner, data in agent_data.items():
                if not partner in partner_column:
                    partner_column[partner] = self.default_result_cols[1:] ## skip partner name
                    # partner_col_data[partner][0] = partner

                ptr = partner_column[partner]
                ptr[0] += data["totale"]
                ptr[1] += data["confermato"]
                ptr[2] += data["attivazione"]
                ptr[3] += data["back"]
                ptr[4] += data["rid"]

                ### --- aggiorniamo il totale
                somma[0] += data["totale"]
                somma[1] += data["confermato"]
                somma[2] += data["attivazione"]
                somma[3] += data["back"]
                somma[4] += data["rid"]




#################################################################
#
#################################################################
def createSheet(d: dict, calculateAgentResultsCB):
    # colonne_gerarchia   = gv.excel_config.output_sheet.colonne_gerarchia
    # colonne_dati        = gv.excel_config.output_sheet.colonne_dati

    sh_index          = gv.COLS.TeamManager.value
    sh_name           = gv.COLS.TeamManager.name

    separator         = '#'

    ## catturiamo tutti i records fino al livello di agent creando dei keypath
    keypaths = dictUtils.chunckList(gv.flatten_keys, item_nrs=sh_index, separator=separator)

    ### --- remove_empty_array items (columns_data)
    records = lnUtils.removeListOfListDuplicates(list_of_lists=keypaths, keep_order=True)




    # --- aggiungiamo le colonne contenenti i risultati di default (=0)
    # self.default_result_cols = [""]
    # # --- @Loreto: prepariamo il titolo
    # title_row = gv.colonne_gerarchia[:sh_index]
    # inx=0
    # for col_name in gv.colonne_dati:
    #     title_row.append(col_name)
    #     if inx > 0:
    #         self.default_result_cols.append(0) ### - Valore di default
    #     inx+=1

    # gv.default_result_cols = commonFunctions.result_columns()

    title_row = commonFunctions.prepareTitleRow(index=sh_index)
    # -------------------------------------------------------------------------------------
    # --- @Loreto: riempiamo le colonne dati con il valori agente
    #--- creiamo un dictionary con key=partner
    # --- {
    # ---   "edison": [0,0,0,0,0], somma dei vaori dei singoli agenti
    # ---   "....":   [0,0,0,0,0]
    # ---   }
    # --- con questi dati andrò a creare delle righe sotto il Team Manager
    # -------------------------------------------------------------------------------------
    sheet_rows = [] # righe del foglio excel
    row_to_be_colored =[]
    for index in range(len(records)):
        partner_col_data = gv.myDict()
        tm_somma=gv.default_result_cols[1:] ### conterrà la somma dei vari partner
        tm_keypath=records[index] ## riga corrente
        gv.logger.info("analysing data for teamManager %s:", tm_keypath[-1])
        agent_list = d[tm_keypath] ### - lista degli agenti sotto questo teamManager

        ### --- aggiunge tutte le rige dei  partner sommati per i relativi agenti
        commonFunctions.processAgentList(agent_list=agent_list, partner_column=partner_col_data, somma=tm_somma)

        new_row = tm_keypath[:]
        ### --- riga con i totali per teamManager
        new_row.append('somma')
        new_row.extend(tm_somma)
        sheet_rows.append(new_row)
        row_to_be_colored.append(len(sheet_rows)+1) ### aggiungere il titolo

        if partner_col_data:
            for partner, data in partner_col_data.items():
                gv.logger.notify("    agent data has been found")
                new_row = tm_keypath[:]
                new_row.append(partner)
                new_row.extend(data)
                sheet_rows.append(new_row)
        else:
            gv.logger.warning("    NO agent data found")


    # --- @Loreto:  eliminiamo le celle che hanno valore == cella superire
    rows_data = dictUtils.compact_list(data=sheet_rows, max_items=sh_index, replace_str='-')

    ### - creiamo il dataFrame
    df = gv.myDict()
    df = pd.DataFrame(
            # columns = colonne_gerarchia[:inx+1],
            columns = title_row,
            data    = rows_data
        )


    lnExcel.addSheet(filename=gv.args.output_agenti_filename, sheets=[sh_name], dataFrames=[df], sheet_exists="replace", mode='a')

    ### --- crea il range del TManager e relativi risultati
    cell_range=[]
    for col in range(gv.COLS.TeamManager.value, len(title_row)+1):
        row_cells = [(row, col) for row in row_to_be_colored]
        cell_range.extend(row_cells)

    file_path = gv.args.output_agenti_filename
    wb = openpyxl.load_workbook(file_path)
    ws = wb[sh_name]
    setColumnSize(ws)
    setTitle(ws)
    setTMagagerColor(ws, cells=cell_range)
    # c = ws['B2']
    ws.freeze_panes = ws['B2'] ## Freeze everything to left of B (that is A) and no columns to feeze
    wb.save(file_path)


