#!/usr/bin/env python3
#
# updated by ...: Loreto Notarantonio
# Date .........: 22-04-2025 19.21.43
#


import sys; sys.dont_write_bytecode = True
import os


import pandas



class lnExcel_Class():

    def __init__(self, excel_filename, logger):
        self.logger=logger
        # self.use_benedict=use_benedict
        self.excel_filename=os.path.expandvars(excel_filename)
        self.xls = pandas.ExcelFile(excel_filename)



    def getSheet(self, name_or_number: (int, str), usecols=None, convert_to: str=None):
        '''
            ref: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html#pandas.read_excel
            ref: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_dict.html
        '''
        excel_data_df = pandas.read_excel(self.xls, sheet_name=name_or_number, usecols=usecols, index_col=0, header=None)

        if usecols:
            self.logger.info("selecting columns: %s", usecols)

        self.logger.debug("converting to: %s", convert_to)
        if convert_to == "json":
            excel_data_df.to_json(orient='records')

        elif convert_to == "dict":
            excel_data_df.to_dict(orient='records')

        elif convert_to == "csv":
            excel_data_df.to_csv(index=False)

        return excel_data_df





###############################################################################################
#           T   E   S   T    -     T   E   S   T    -     T   E   S   T    -
#           T   E   S   T    -     T   E   S   T    -     T   E   S   T    -
#           T   E   S   T    -     T   E   S   T    -     T   E   S   T    -
#           T   E   S   T    -     T   E   S   T    -     T   E   S   T    -
#           T   E   S   T    -     T   E   S   T    -     T   E   S   T    -
#           T   E   S   T    -     T   E   S   T    -     T   E   S   T    -
###############################################################################################



##########################################################################
# https://github.com/borntyping/python-colorlog/blob/main/doc/example.py
##########################################################################
def setup_logger(logger_name: str, logger_level: str, colored=True):
    import logging

    my_levels={
        "critical": 50,
        "caller": 45,
        "error": 40,
        "notify": 33,
        "warning": 30,
        "function": 25,
        "info": 20,
        "debug": 10,
        "trace": 5,
        "notset": 0,
    }


    # --------- Adding NOTIFY level -------------------
    def addNotifyLevel(level):
        logging.NOTIFY=level
        def _notify(logger, message, *args, **kwargs):
            if logger.isEnabledFor(logging.NOTIFY):
                logger._log(logging.NOTIFY, message, args, **kwargs)
        logging.Logger.notify = _notify
        logging.addLevelName(logging.NOTIFY, "NOTIFY")
    # --------- Adding NOTIFY level -------------------

    # create logging formatter
    if colored:
        from colorlog import ColoredFormatter
        formatter = ColoredFormatter(
            "%(cyan)s%(asctime)s %(blue)s[%(module)s.%(funcName)s:%(lineno)4s] %(log_color)s[%(levelname)4s] : %(log_color)s%(message)s",
            datefmt="%H:%M:%S",
            reset=True,
            log_colors={
                'TRACE':    'blue',
                'DEBUG':    'cyan',
                'NOTIFY':   'fg_bold_cyan',
                'INFO':     'green',
                'FUNCTION': 'fg_bold_yellow',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CALLER':   'red',
                'CRITICAL': 'red,bg_white',
            },
        )


    else:
        formatter=logging.Formatter(
            fmt="%(asctime)s [%(module)s.%(funcName)s:%(lineno)4s] [%(levelname)4s] : %(message)s",
            datefmt="%H:%M:%S",
            style="%"
            )


    addNotifyLevel(level=my_levels["notify"])

    # create logger
    logger = logging.getLogger(logger_name)
    logger.setLevel("DEBUG")

    # create console handler
    consoleHandler = logging.StreamHandler()
    consoleHandler.setFormatter(formatter)
    consoleHandler.setLevel(logger_level.upper())

    # Add console handler to logger
    logger.addHandler(consoleHandler)

    logger.propagate = False # se messo a True mi trovo due righe di log, una colorata e l'altra no.

    return logger




if __name__ == '__main__':
    logger=setup_logger(colored=True, logger_name='Loreto', logger_level="info")
    # import pdb; pdb.set_trace() # by Loreto
    excelFilename = "/media/loreto/LnDisk_SD_ext4/Filu/GIT-REPO/Python/stefanoGirini/data/export_contratti.xls"
    lnExcel = lnExcel_Class(excel_filename=excelFilename, logger=logger)

    sheet1 = lnExcel.getSheet(0)
    print(sheet1)

    d_sheet1 = lnExcel.getSheet(0, usecols=[1, 2, 3], convert_to="dict")
    print(d_sheet1)

    import pdb; pdb.set_trace() # by Loreto
